openapi: "3.0.0"

info:
  description: Account store API for DLUHC Funding Service Design
  version: "0.1.1"
  title: Funding Service Design - Account store
paths:
  /accounts:
    get:
      tags:
        - accounts
      summary: "Return the account data for the given email address or account id."
      description: "Given an account id or email address, return the json associated with the account, or 404 if none are found."
      operationId: core.account.get_account
      parameters:
        - name: email_address
          in: query
          description: "The email is used for the account id lookup, if both account_id and email_address are given then the lookup will use the account_id instead."
          required: false
          schema:
            type: string
        - name: account_id
          in: query
          description: "The account id is to be looked up, if both account_id and email_address are given then the look up will use the account_id instead"
          required: false
          schema:
            type: string
      responses:
        200:
          description: The requested account exists, and the accounts json payload is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/account'
        404:
          description: "The requested account doesn't exist."
    post:
      summary: "Post a new email, creating an new account with a unique account id in the account store."
      description: "Given an email, we create a corresponding account object in the account store."
      operationId: core.account.post_account_by_email
      requestBody:
        description: Account creation parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountCreate'
            example:
              email_address: 'a@example.com'
      responses:
        201:
          description: "If the resource is successfully created then the created resource is returned."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountCreated'
        409:
          description: "This email address has already been used to create an account"
  /accounts/{account_id}:
    put:
      tags:
        - accounts
      summary: Put changes to an account
      description: Put changes to a specific account by account id
      operationId: core.account.put_account
      requestBody:
        description: Account update parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountUpdate'
            example:
              roles: ['ASSESSOR', 'COMMENTER']
              full_name: "Jane Doe"
      responses:
        201:
          description: SUCCESS - An account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountStatus'
        401:
          description: ERROR - Account could not be updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                status: 'error'
                message: 'Account corresponding to id could not be updated.'
      parameters:
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            format: path

components:
  schemas:
    accountCreate:
      type: object
      required:
        - email_address
      properties:
        email_address:
          type: string
    accountUpdate:
      type: object
      required:
        - roles
      properties:
        full_name:
          type: string
        roles:
          type: array
    accountStatus:
      type: object
      properties:
        id:
          type: string
          description: The unique id for the given account.
        email_address:
          type: string
          pattern: '(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)'
          description: An email address.
          example: "test@cool.com"
        full_name:
          type: string
          description: A full name.
          example: "Jane Doe"
        roles:
          type: array
          description: An array of roles
          example: ["ASSESSOR", "COMMENTER"]
    accountCreated:
      type: object
      properties:
        account_id:
          type: string
          description: The unique id for the given account.
        email_address:
          type: string
          pattern: '(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)'
          description: An email address.
          example: "test@cool.com"
    account:
      type: object
      properties:
        account_id:
          type: string
          description: The unique id for the given account.
        email_address:
          type: string
          pattern: '(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)'
          description: An email address.
          example: "test@cool.com"
        full_name:
          type: string
          description: A full name.
          example: "Jane Doe"
        roles:
          type: array
          description: An array of roles
          example: ["ASSESSOR", "COMMENTER"]

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
